name: Lighthouse CI

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'pages/**' 
      - 'app/**'
      - 'components/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.*'
      - 'lighthouserc.js'
      - 'dynamic-routes-map.json'
      - 'component-routes-map.json'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'pages/**'
      - 'app/**'
      - 'components/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.*'
      - 'lighthouserc.js'
      - 'dynamic-routes-map.json'
      - 'component-routes-map.json'
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      urls:
        description: 'Custom URLs to test (space-separated)'
        required: false
        default: ''
      skip_build:
        description: 'Skip Next.js build step'
        required: false
        default: false
        type: boolean

env:
  # Base URL for Lighthouse testing - use localhost for GitHub Actions testing
  LIGHTHOUSE_BASE_URL: ${{ vars.LIGHTHOUSE_BASE_URL || 'http://localhost:3000' }}

jobs:
  # Job for Pull Request and Push - test only changed pages
  lighthouse-pr:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: Lighthouse CI (Changed Pages - ${{ github.event_name }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for git diff
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Install Node.js dependencies
        run: npm ci
        
      - name: Build Next.js application
        run: |
          echo "🏗️ Building Next.js application for localhost testing..."
          npm run build
          
      - name: Start Next.js server
        run: |
          echo "🚀 Starting Next.js server on localhost:3000..."
          npm start &
          
          # Wait for server to be ready
          echo "⏳ Waiting for localhost:3000 to be accessible..."
          for i in {1..30}; do
            if curl -s --max-time 5 http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Next.js server is ready at http://localhost:3000"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Next.js server failed to start within 30 seconds"
              echo "Checking server logs..."
              pkill -f "npm start" || echo "No npm start process found"
              exit 1
            fi
            
            if [ $((i % 5)) -eq 0 ]; then
              echo "⏳ Still waiting for server... (${i}/30 seconds)"
            fi
            
            sleep 1
          done
        
      - name: Detect changed pages
        id: changed-pages
        run: |
          # Get changed URLs using our custom script
          echo "🔍 Running change detection script..."
          
          # Check if script exists and is executable
          if [ ! -f "./scripts/get-changed-pages.sh" ]; then
            echo "❌ get-changed-pages.sh script not found"
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "error=script_missing" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ ! -x "./scripts/get-changed-pages.sh" ]; then
            echo "⚠️ Making get-changed-pages.sh executable"
            chmod +x ./scripts/get-changed-pages.sh
          fi
          
          # Run script with error handling
          set +e  # Don't exit on error
          URLS=$(SKIP_BUILD=1 ./scripts/get-changed-pages.sh main 2>&1)
          SCRIPT_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          if [ $SCRIPT_EXIT_CODE -ne 0 ]; then
            echo "❌ Change detection script failed with exit code: $SCRIPT_EXIT_CODE"
            echo "Script output: $URLS"
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "error=script_failed" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Filter out any error messages that might be in the output
          CLEAN_URLS=$(echo "$URLS" | grep -E '^https?://' || echo "")
          
          if [ -z "$CLEAN_URLS" ]; then
            echo "📝 No page-related changes detected"
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=no_changes" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "✅ Detected URLs: $CLEAN_URLS"
          echo "urls=$CLEAN_URLS" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT
          
          # Count URLs for summary
          URL_COUNT=$(echo "$CLEAN_URLS" | wc -w)
          echo "url_count=$URL_COUNT" >> $GITHUB_OUTPUT
          echo "📊 Total URLs to test: $URL_COUNT"
          
      - name: Verify localhost server is ready
        if: steps.changed-pages.outputs.skip != 'true'
        run: |
          echo "🌐 Verifying localhost server at $LIGHTHOUSE_BASE_URL..."
          
          # Double-check that localhost is still accessible
          if curl -s --max-time 5 $LIGHTHOUSE_BASE_URL > /dev/null 2>&1; then
            echo "✅ Localhost server is ready for Lighthouse testing!"
          else
            echo "❌ Localhost server is not accessible"
            echo "Checking server status..."
            ps aux | grep "npm start" || echo "No npm start process found"
            exit 1
          fi
          
      - name: Run Lighthouse CI
        id: lighthouse-ci
        if: always()
        env:
          LIGHTHOUSE_URLS: ${{ steps.changed-pages.outputs.urls || env.LIGHTHOUSE_BASE_URL }}
        run: |
          # Always run Lighthouse CI, even if change detection suggests skipping
          if [ "${{ steps.changed-pages.outputs.skip }}" = "true" ]; then
            echo "⚠️ Change detection suggested skipping, but forcing Lighthouse run for testing"
            LIGHTHOUSE_URLS="$LIGHTHOUSE_BASE_URL"
          fi
          
          # Ensure we have URLs to test
          if [ -z "$LIGHTHOUSE_URLS" ]; then
            LIGHTHOUSE_URLS="$LIGHTHOUSE_BASE_URL"
            echo "⚠️ No specific URLs from change detection, using base URL: $LIGHTHOUSE_URLS"
          fi
          
          echo "🚀 Running Lighthouse CI on URLs: $LIGHTHOUSE_URLS"
          echo "📊 Configuration: Single run per URL for faster CI"
          echo "⚠️  Quality Gates: CI will FAIL if scores are below thresholds"
          echo "   - Performance: ≥60%"
          echo "   - Accessibility: ≥80%"
          echo "   - Best Practices: ≥70%"
          echo "   - SEO: ≥70%"
          echo ""
          
          # Verify URLs are accessible before running Lighthouse
          echo "🔍 Verifying URL accessibility..."
          for url in $LIGHTHOUSE_URLS; do
            echo "Testing: $url"
            if curl -s --max-time 10 "$url" > /dev/null 2>&1; then
              echo "✅ $url is accessible"
            else
              echo "❌ $url is not accessible"
            fi
          done
          echo ""
          
          # Run Lighthouse CI and capture exit code, but don't fail immediately
          set +e  # Don't exit on error
          echo "🏃 Starting Lighthouse CI analysis..."
          echo "📋 Current working directory: $(pwd)"
          echo "📋 Environment variables:"
          echo "  LIGHTHOUSE_URLS: $LIGHTHOUSE_URLS"
          echo "  CI: $CI"
          echo "  GITHUB_ACTIONS: $GITHUB_ACTIONS"
          
          # Run with verbose output to see what's happening
          npx lhci autorun --verbose --no-logs-collection
          LIGHTHOUSE_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          # Store the exit code for later use
          echo "lighthouse_exit_code=$LIGHTHOUSE_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Check what was generated
          echo "📂 Checking generated files..."
          if [ -d ".lighthouseci" ]; then
            echo "✅ .lighthouseci directory created"
            echo "📁 Directory structure:"
            find .lighthouseci -type f -exec ls -la {} \;
            echo "📄 File contents preview:"
            find .lighthouseci -name "*.json" -exec echo "=== {} ===" \; -exec head -20 {} \;
          else
            echo "❌ No .lighthouseci directory found"
            echo "Current directory contents:"
            ls -la
          fi
          
          if [ $LIGHTHOUSE_EXIT_CODE -eq 0 ]; then
            echo "✅ Lighthouse CI passed all quality gates!"
          else
            echo "❌ Lighthouse CI failed quality gates (exit code: $LIGHTHOUSE_EXIT_CODE)"
            echo "📊 Reports will still be generated and uploaded for analysis"
          fi
          
      - name: Debug and prepare Lighthouse artifacts
        if: always()
        run: |
          echo "🔍 Debugging: Checking what Lighthouse CI generated..."
          echo "Current directory contents:"
          ls -la
          
          echo "Lighthouse CI directory contents:"
          if [ -d ".lighthouseci" ]; then
            echo "✅ Found .lighthouseci directory"
            find .lighthouseci -type f | head -20
            ls -la .lighthouseci/
          else
            echo "❌ .lighthouseci directory not found"
          fi
          
          echo "Creating artifacts directory..."
          mkdir -p ./lighthouse-artifacts
          
          # Copy any generated reports
          if [ -d ".lighthouseci" ]; then
            echo "📂 Copying .lighthouseci contents..."
            cp -r .lighthouseci ./lighthouse-artifacts/ || echo "Could not copy .lighthouseci"
          else
            echo "⚠️ No .lighthouseci directory to copy"
          fi
          
          # Create a metadata file for debugging
          cat > ./lighthouse-artifacts/workflow-metadata.json << EOF
          {
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.head_ref || github.ref_name }}",
            "event_type": "${{ github.event_name }}",
            "pr_number": "${{ github.event.number }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "lighthouse_exit_code": "${{ steps.lighthouse-ci.outputs.lighthouse_exit_code || 'not_set' }}",
            "urls_tested": "${{ steps.changed-pages.outputs.urls || env.LIGHTHOUSE_BASE_URL }}",
            "triggered_by": "${{ github.actor }}",
            "change_detection_skip": "${{ steps.changed-pages.outputs.skip || 'false' }}",
            "change_detection_reason": "${{ steps.changed-pages.outputs.reason || 'none' }}"
          }
          EOF
          
          echo "Artifact contents prepared:"
          find ./lighthouse-artifacts -type f | head -20
          
          # Show file sizes to understand what we're uploading
          echo "Artifact file sizes:"
          find ./lighthouse-artifacts -type f -exec ls -lh {} \;
          
      - name: Upload Lighthouse reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-pr-${{ github.event.number || github.run_id }}
          path: lighthouse-artifacts/
          retention-days: 30
          include-hidden-files: true
          
      - name: Post Lighthouse results summary
        if: steps.changed-pages.outputs.skip != 'true' && always()
        run: |
          echo "Creating Lighthouse results summary..."
          
          # Create results summary JSON
          cat > lighthouse-summary.json << EOF
          {
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.head_ref || github.ref_name }}",
            "event_type": "${{ github.event_name }}",
            "pr_number": "${{ github.event.number }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "changed_urls": "${{ steps.changed-pages.outputs.urls }}",
            "artifact_name": "lighthouse-reports-pr-${{ github.event.number || github.run_id }}",
            "lighthouse_exit_code": "${{ steps.lighthouse-ci.outputs.lighthouse_exit_code }}",
            "quality_gates_passed": ${{ steps.lighthouse-ci.outputs.lighthouse_exit_code == '0' }},
            "reports_path": "lighthouse-artifacts/",
            "triggered_by": "${{ github.actor }}"
          }
          EOF
          
          echo "Lighthouse summary created for dashboard integration"
          echo "Exit code: ${{ steps.lighthouse-ci.outputs.lighthouse_exit_code }}"
          
      - name: Upload Lighthouse summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-summary-${{ github.event.number || github.run_id }}
          path: lighthouse-summary.json
          retention-days: 30
          include-hidden-files: true
          
      - name: Comment PR
        if: steps.changed-pages.outputs.skip != 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const urlCount = '${{ steps.changed-pages.outputs.url_count }}';
            const urls = '${{ steps.changed-pages.outputs.urls }}'.split(' ');
            
            const body = `## 🔍 Lighthouse CI Results (${urlCount} page${urlCount > 1 ? 's' : ''})
            
            Lighthouse CI has analyzed the pages affected by your changes:
            
            ${urls.map(url => `- ${url}`).join('\n')}
            
            ### 🚦 Quality Gates (Required for Merge)
            - **Performance:** ≥60%
            - **Accessibility:** ≥80%
            - **Best Practices:** ≥70%
            - **SEO:** ≥70%
            
            Check the **Checks** tab above for detailed results and performance metrics.
            
            > ⚠️ **Important:** This PR will be blocked from merging if any quality gate fails.
            > 💡 This analysis only covers pages affected by your changes. A full site audit runs nightly.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
      - name: Fail job if Lighthouse CI failed (after artifacts uploaded)
        if: steps.changed-pages.outputs.skip != 'true' && steps.lighthouse-ci.outputs.lighthouse_exit_code != '0'
        run: |
          echo "❌ Lighthouse CI failed - Quality gates not met!"
          echo ""
          echo "🚫 This PR cannot be merged until performance scores improve."
          echo ""
          echo "📈 Required minimum scores:"
          echo "   • Performance: ≥60%"
          echo "   • Accessibility: ≥80%"
          echo "   • Best Practices: ≥70%"
          echo "   • SEO: ≥70%"
          echo ""
          echo "📊 Lighthouse reports have been uploaded as artifacts for analysis."
          echo "💡 Check your dashboard at http://localhost:3000 to see detailed results."
          echo ""
          echo "🔍 You can also check the Lighthouse reports in the 'Artifacts' section above."
          exit 1
            
      - name: Skip notification
        if: steps.changed-pages.outputs.skip == 'true'
        run: |
          echo "⏭️ Lighthouse CI Skipped"
          
          if [ "${{ steps.changed-pages.outputs.error }}" = "script_missing" ]; then
            echo "❌ Change detection script not found"
            echo "Please ensure scripts/get-changed-pages.sh exists and is committed"
          elif [ "${{ steps.changed-pages.outputs.error }}" = "script_failed" ]; then
            echo "❌ Change detection script failed"
            echo "Check the script for errors or permissions issues"
          elif [ "${{ steps.changed-pages.outputs.reason }}" = "no_changes" ]; then
            echo "✅ No page-related files were changed in this PR"
            echo "Lighthouse CI skipped to save resources"
          else
            echo "ℹ️ Lighthouse CI was skipped"
          fi
          
          echo ""
          echo "📋 What triggers Lighthouse CI:"
          echo "  • Changes to src/, pages/, app/, components/"
          echo "  • Changes to package.json, next.config.*"
          echo "  • Changes to lighthouse configuration files"

  # Job for scheduled runs - test all pages
  lighthouse-full:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    name: Lighthouse CI (Full Site Audit)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Install Node.js dependencies
        run: npm ci
        
      - name: Build Next.js application
        run: |
          echo "🏗️ Building Next.js application for localhost testing..."
          npm run build
          
      - name: Start Next.js server
        run: |
          echo "🚀 Starting Next.js server on localhost:3000..."
          npm start &
          
          # Wait for server to be ready
          echo "⏳ Waiting for localhost:3000 to be accessible..."
          for i in {1..30}; do
            if curl -s --max-time 5 http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Next.js server is ready at http://localhost:3000"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Next.js server failed to start within 30 seconds"
              echo "Checking server logs..."
              pkill -f "npm start" || echo "No npm start process found"
              exit 1
            fi
            
            if [ $((i % 5)) -eq 0 ]; then
              echo "⏳ Still waiting for server... (${i}/30 seconds)"
            fi
            
            sleep 1
          done
        
      - name: Verify localhost server is ready
        run: |
          echo "🌐 Verifying localhost server at $LIGHTHOUSE_BASE_URL..."
          
          # Double-check that localhost is still accessible
          if curl -s --max-time 5 $LIGHTHOUSE_BASE_URL > /dev/null 2>&1; then
            echo "✅ Localhost server is ready for full audit!"
          else
            echo "❌ Localhost server is not accessible"
            echo "Checking server status..."
            ps aux | grep "npm start" || echo "No npm start process found"
            exit 1
          fi
          
      - name: Run full Lighthouse CI audit
        id: lighthouse-ci-full
        env:
          LIGHTHOUSE_URLS: ${{ github.event.inputs.urls }}
        run: |
          if [ -n "$LIGHTHOUSE_URLS" ]; then
            echo "🚀 Running Lighthouse CI on custom URLs: $LIGHTHOUSE_URLS"
          else
            echo "🚀 Running Lighthouse CI on all configured URLs"
          fi
          echo "📊 Configuration: Single run per URL for faster CI"
          echo "⚠️  Quality Gates: Performance monitoring thresholds enforced"
          echo "   - Performance: ≥60%"
          echo "   - Accessibility: ≥80%"
          echo "   - Best Practices: ≥70%"
          echo "   - SEO: ≥70%"
          echo ""
          
          # Run Lighthouse CI and capture exit code, but don't fail immediately
          set +e  # Don't exit on error
          npx lhci autorun --no-logs-collection
          LIGHTHOUSE_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          # Store the exit code for later use
          echo "lighthouse_exit_code=$LIGHTHOUSE_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $LIGHTHOUSE_EXIT_CODE -eq 0 ]; then
            echo "✅ Full Lighthouse CI audit passed all quality gates!"
          else
            echo "❌ Full Lighthouse CI audit failed quality gates (exit code: $LIGHTHOUSE_EXIT_CODE)"
            echo "📊 Reports will still be generated and uploaded for analysis"
          fi
          
      - name: Debug and prepare full audit artifacts
        if: always()
        run: |
          echo "🔍 Debugging: Checking what full Lighthouse CI generated..."
          echo "Current directory contents:"
          ls -la
          
          echo "Lighthouse CI directory contents:"
          if [ -d ".lighthouseci" ]; then
            find .lighthouseci -type f -name "*.json" | head -10
            ls -la .lighthouseci/
          else
            echo "❌ .lighthouseci directory not found"
          fi
          
          echo "Creating summary even if Lighthouse failed..."
          mkdir -p ./lighthouse-artifacts-full
          
          # Copy any generated reports
          if [ -d ".lighthouseci" ]; then
            cp -r .lighthouseci ./lighthouse-artifacts-full/ || echo "Could not copy .lighthouseci"
          fi
          
          # Create a metadata file for debugging
          cat > ./lighthouse-artifacts-full/workflow-metadata.json << EOF
          {
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.head_ref || github.ref_name }}",
            "event_type": "${{ github.event_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "lighthouse_exit_code": "${{ steps.lighthouse-ci-full.outputs.lighthouse_exit_code }}",
            "custom_urls": "${{ github.event.inputs.urls }}",
            "triggered_by": "${{ github.actor }}",
            "audit_type": "full_site"
          }
          EOF
          
          echo "Full audit artifact contents prepared:"
          find ./lighthouse-artifacts-full -type f | head -20
          
      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-full-${{ github.run_id }}
          path: lighthouse-artifacts-full/
          retention-days: 30
          include-hidden-files: true
          
      - name: Fail job if full Lighthouse CI failed (after artifacts uploaded)
        if: steps.lighthouse-ci-full.outputs.lighthouse_exit_code != '0'
        run: |
          echo "❌ Full Lighthouse CI audit failed - Quality gates not met!"
          echo ""
          echo "📈 Performance standards not maintained:"
          echo "   • Performance: ≥60%"
          echo "   • Accessibility: ≥80%"
          echo "   • Best Practices: ≥70%"
          echo "   • SEO: ≥70%"
          echo ""
          echo "📊 Lighthouse reports have been uploaded as artifacts for analysis."
          echo "🔍 Check the 'Artifacts' section above for detailed reports."
          exit 1
          
      - name: Create issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Nightly Lighthouse CI Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Lighthouse CI Failure Report
            
            The nightly Lighthouse CI audit failed on ${new Date().toISOString()}.
            
            **Run Details:**
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
            
            **Possible Issues:**
            - Performance regressions
            - Server startup failures
            - Configuration problems
            - Network connectivity issues
            
            Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
            
            ---
            *This issue was automatically created by the Lighthouse CI workflow.*`;
            
            // Check if there's already an open issue for today
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'lighthouse-ci,automated'
            });
            
            const today = new Date().toISOString().split('T')[0];
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(today) && issue.title.includes('Lighthouse CI Failed')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['lighthouse-ci', 'automated', 'bug']
              });
            }

  # Summary job
  lighthouse-summary:
    if: always() && (needs.lighthouse-pr.result != 'skipped' || needs.lighthouse-full.result != 'skipped')
    name: Lighthouse CI Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-pr, lighthouse-full]
    
    steps:
      - name: Summary
        run: |
          echo "## 🔍 Lighthouse CI Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lighthouse-pr.result }}" = "success" ]; then
            echo "✅ **PR Analysis:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lighthouse-pr.result }}" = "skipped" ]; then
            echo "⏭️ **PR Analysis:** Skipped (no page changes)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lighthouse-pr.result }}" = "failure" ]; then
            echo "❌ **PR Analysis:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.lighthouse-full.result }}" = "success" ]; then
            echo "✅ **Full Site Audit:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lighthouse-full.result }}" = "failure" ]; then
            echo "❌ **Full Site Audit:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **PR Analysis:** Tests only pages affected by changes" >> $GITHUB_STEP_SUMMARY
          echo "- 🌙 **Nightly Audit:** Comprehensive site-wide performance check" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Reports:** Available in workflow artifacts and checks" >> $GITHUB_STEP_SUMMARY
